pipeline {
    agent none
    stages {
        stage('Build and Test') {
            options {
                timeout(time: 10, unit: 'MINUTES')
            }
            matrix {
                axes {
                    axis {
                        name 'COMPILER'
                        values 'gcc', 'clang'
                    }
                }
                agent {
                    dockerfile {
                        filename 'ci/Dockerfile'
                        label 'linux && docker'
                    }
                }
                environment {
                    CC = "${env.COMPILER == 'gcc' ? 'gcc' : 'clang'}"
                    CXX = "${env.COMPILER == 'gcc' ? 'g++' : 'clang++'}"
                    HOME = "$WORKSPACE"
                    OMP_NUM_THREADS = "$PARALLEL"
                }
                stages {
                    stage('Build') {
                        steps {
                            sh '''
                                python3 -m venv venv
                                . venv/bin/activate
                                python -m pip install -U pip
                                python -m pip install -v -Csetup-args="-Dwerror=true" -Ccompile-args="-j$PARALLEL" -Ccompile-args="--verbose" .[test]
                            '''
                        }
                    }
                    stage('Test') {
                        steps {
                            sh '''
                                . venv/bin/activate
                                python -m pytest -vs
                            '''
                        }
                    }
                }
            }
        }

        stage('Build and Upload Wheels') {
            options {
                timeout(time: 15, unit: 'MINUTES')
            }
            agent { label 'linux' }
            environment {
                HOME = "$WORKSPACE"
            }
            stages {
                stage('Build') {
                    steps {
                        sh '''
                            which python3
                            python3 --version
                            python3 -m venv venv
                            . venv/bin/activate
                            python -m pip install -U pip
                            python -m pip install -vU cibuildwheel
                            cibuildwheel
                        '''
                    }
                }
                // stage('Upload') {
                // }
            }
        }
    }
}
