pipeline {
    agent none
    stages {
        stage('Build and Test') {
            options {
                timeout(time: 10, unit: 'MINUTES')
            }
            matrix {
                axes {
                    axis {
                        name 'COMPILER'
                        values 'gcc', 'clang'
                    }
                }
                agent {
                    dockerfile {
                        filename 'ci/Dockerfile'
                        label 'linux && docker'
                    }
                }
                environment {
                    CC = "${env.COMPILER == 'gcc' ? 'gcc' : 'clang'}"
                    CXX = "${env.COMPILER == 'gcc' ? 'g++' : 'clang++'}"
                    HOME = "$WORKSPACE"
                    OMP_NUM_THREADS = "$PARALLEL"
                    UV_PYTHON_PREFERENCE = "only-system"
                }
                stages {
                    stage('Build') {
                        steps {
                            // Not using uv sync due to https://github.com/astral-sh/uv/issues/10996
                            // Waiting for uv pip install --group: https://github.com/astral-sh/uv/issues/8590
                            sh '''
                                uv venv
                                . .venv/bin/activate
                                uv export --only-group=dev | uv pip install --requirements=-
                                uv pip install -v -Csetup-args="-Dwerror=true" -Ccompile-args="-j$PARALLEL" .
                            '''
                        }
                    }
                    stage('Test') {
                        steps {
                            sh '''
                                . .venv/bin/activate
                                pytest -vs
                            '''
                        }
                    }
                }
            }
        }

        stage('Build and Upload') {
            // when {
            //     buildingTag()
            //     tag pattern: "v\\d+.*", comparator: "REGEXP"
            // }
            agent { label 'linux' }
            options {
                timeout(time: 15, unit: 'MINUTES')
            }
            environment {
                HOME = "${env.WORKSPACE}"
                OMP_NUM_THREADS = "${env.PARALLEL}"
                UV_PYTHON_PREFERENCE = "system"
                PATH = "${env.HOME}/.local/bin${env.PATH ? ':' + env.PATH : ''}"
            }

            stages {
                stage('Setup') {
                    steps {
                        // We're using docker as a way to install uv from a cache
                        sh '''
                            id=$(docker create ghcr.io/astral-sh/uv:latest)
                            mkdir -p $HOME/.local/bin
                            docker cp $id:/uv $HOME/.local/bin/
                            docker rm $id
                            uv tool install 'cibuildwheel >= 2.22'
                            # work around race condition in cibuildwheel
                            mkdir -p $WORKSPACE/wheelhouse
                        '''
                    }
                }
                stage('Build') {
                    matrix {
                        axes {
                            axis {
                                name 'PYTHON'
                                // cp312 will build Limited API wheels for 3.12+
                                values 'cp39', 'cp310', 'cp311', 'cp312', 'sdist'
                            }
                        }

                        stages {
                            stage('Wheel') {
                                when {
                                    expression { env.PYTHON != 'sdist' }
                                }
                                environment {
                                    CIBW_BUILD = "${env.PYTHON}-*"
                                    CIBW_ENVIRONMENT_PASS_LINUX = "OMP_NUM_THREADS"
                                }
                                steps {
                                    sh 'cibuildwheel'
                                }
                            }
                            stage('sdist') {
                                when {
                                    expression { env.PYTHON == 'sdist' }
                                }
                                stages {
                                    stage('Build') {
                                        agent {
                                            dockerfile {
                                                filename 'ci/Dockerfile'
                                                label 'linux && docker'
                                            }
                                        }
                                        environment {
                                            HOME = "${env.WORKSPACE}"
                                            PATH = "${env.HOME}/.local/bin${env.PATH ? ':' + env.PATH : ''}"
                                        }
                                        steps {
                                            sh '''
                                                printenv
                                                ls -l $HOME/.cache || true
                                                ls -l $WORKSPACE/.cache || true
                                                uv build -v --sdist
                                            '''
                                        }
                                    }

                                    stage('Test') {
                                        agent {
                                            dockerfile {
                                                filename 'ci/Dockerfile'
                                                label 'linux && docker'
                                            }
                                        }
                                        steps {
                                            sh '''
                                                uv venv
                                                . .venv/bin/activate
                                                uv export --only-group=dev | uv pip install --requirements=-
                                                uv pip install -v -Csetup-args="-Dwerror=true" -Ccompile-args="-j$PARALLEL" dist/*.tar.gz
                                                pytest -vs
                                            '''
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                stage('Upload') {
                    environment {
                        UV_PUBLISH_TOKEN = credentials('pycorrfunc-testpypi')
                    }
                    steps {
                        sh '''
                            ls -lR
                            uv publish --publish-url="https://test.pypi.org/legacy/" wheelhouse/*.whl dist/*.tar.gz'
                        '''
                    }
                }
            }
        }
    }
}
